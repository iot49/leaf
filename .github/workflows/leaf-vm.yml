name: Compile and release MicroPython firmware

on:
  push:
    tags:
      - '**'

env:
  BOARD: ESP32_S3_N16R8

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Define env
        run: |
          echo "BOARD=${BOARD}" >> $GITHUB_ENV
          echo "IDF_VERSION=v5.0.4" >> $GITHUB_ENV
          echo "FROZEN=src/freeze/manifest.py" >> $GITHUB_ENV
          echo "VERSION_FILE=src/freeze/version.py" >> $GITHUB_ENV
          echo "USER_C_MODULES=src/modules/micropython.cmake" >> $GITHUB_ENV
          echo "BUILD_DIR=micropython/ports/esp32/build-${{ env.BOARD }}" >> $GITHUB_ENV
          echo "PORT_DIR=micropython/ports/esp32" >> $GITHUB_ENV
          echo "FIRMWARE_DIR=firmware/${{ env.BOARD }}/$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          echo "WORKING_DIR=trees/vm" >> $GITHUB_ENV

      - name: Display env
        run: |
          echo BOARD=${{ env.BOARD }}
          echo BUILD_DIR=${{ env.BUILD_DIR }}
          echo PORT_DIR=${{ env.PORT_DIR }}
          echo FIRWARE_DIR=${{ env.FIRMWARE_DIR }}
          echo VERSION_FILE=${{ env.VERSION_FILE }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: ls ROOT
        run: |
          echo github.workspace: ${{ github.workspace }}
          ls -l
          ls -l ${{ github.workspace }}

      - name: Checkout required submodules
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          git submodule update --init micropython
          cd micropython; git submodule update --init lib/berkeley-db-1.xx lib/micropython-lib

      - name: Copy boards to PORT_DIR/boards
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "TAG = '${{ github.ref_name }}'; BOARD = '${{ env.BOARD }}'; GITHUB_REPOSITORY = '${GITHUB_REPOSITORY}'; IDF_VERSION = '${{ env.IDF_VERSION }}'" > ${{ env.VERSION_FILE }}
          cat ${{ env.VERSION_FILE }}
          mkdir -p ${{ env.PORT_DIR }}/boards
          cp -a boards/${{ env.BOARD }} ${{ env.PORT_DIR }}/boards
          # Hack: sometimes (???) idf looks for custom partition table in PORT_DIR
          cp ${{ env.PORT_DIR }}/boards/${{ env.BOARD }}/partition* ${{ env.PORT_DIR }}

      # https://github.com/marketplace/actions/docker-cache
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ env.IDF_VERSION }}

      - name: Compile
        uses: addnab/docker-run-action@v3
        with:
          # https://github.com/espressif/esp-idf/blob/master/tools/docker/Dockerfile
          image: espressif/idf:${{ env.IDF_VERSION }}
          options: -v /home/runner/work/leaf/leaf:/project -w /project/${{ env.PORT_DIR }} -e BOARD=${{ env.BOARD }} -e USER_C_MODULES=/project/${{ env.USER_C_MODULES }} -e FROZEN=/project/${{ env.FROZEN }}
          run: |
            . $IDF_PATH/export.sh
            ls -l
            echo ls /project
            ls -l /project
            cd ${{ env.WORKING_DIR }}
            ls -l
            ls -l ../
            # make sure FROZEN_MANIFEST is not set when running mpy-cross
            make -C /project/micropython/mpy-cross 
            make BOARD=${BOARD} clean
            make V=1 BOARD=${BOARD} FROZEN_MANIFEST=${FROZEN}
            # rename so we can release multiple versions for different boards
            mv /project/${{ env.BUILD_DIR }}/firmware.bin    /project/${{ env.BUILD_DIR }}/${{ env.BOARD }}-firmware.bin
            mv /project/${{ env.BUILD_DIR }}/micropython.bin /project/${{ env.BUILD_DIR }}/${{ env.BOARD }}-micropython.bin

      - name: Release
        working-directory: ${{ env.WORKING_DIR }}/${{ env.PORT_DIR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="MicroPython VM $tag" \
              build-${{ env.BOARD }}/${{ env.BOARD }}-firmware.bin \
              build-${{ env.BOARD }}/${{ env.BOARD }}-micropython.bin
