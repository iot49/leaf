# docker-compose.yml for Balena

# IMPORTANT: set environment variables in the Balena dashboard

version: '2'

networks:
  tunnel:
  config:
  database:

volumes:
  config: # app configuration files
  ui: # ui static files, served by api at /ui
  jupyter: # jupyter notebooks
  letsencrypt: # letsencrypt certificates
  letsencrypt-log: # letsencrypt logs
  code-server: # code-server configuration
  cloudflare: # cloudflare credentials
  timescaledb: # timescaledb database
  postgres: # postgres database
  wireshark: # wireshark configuration
  homeassistant: # homeassistant configuration

services:
  tunnel:
    container_name: tunnel
    image: cloudflare/cloudflared:latest
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    restart: unless-stopped
    command: tunnel run
    networks:
      - tunnel
    depends_on:
      - api
      - homeassistant
      - jupyter
      - code-server

  api:
    container_name: api
    image: ttmetro/leaf-backend
    environment:
      - ENVIRONMENT=prod
      - PROJECT_NAME=${PROJECT_NAME}
      - DOMAIN=${DOMAIN}
      - FIRST_SUPERUSER_EMAIL=${FIRST_SUPERUSER_EMAIL}
      - DATABASE_URL=sqlite+aiosqlite:///sqlite-prod.db
      - DATABASE_ECHO=False
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - UI_DIR=/home/ui
      - CONFIG_DIR=/home/config
      - CF_POLICY_AUD=${CF_POLICY_AUD}
      - CF_TEAM_DOMAIN=${CF_TEAM_DOMAIN}
      - CF_API_TOKEN=${CF_API_TOKEN}
      - CF_EMAIL=${CF_EMAIL}
    restart: unless-stopped
    expose:
      - 8000
    volumes:
      - ui:/home/ui # static files (lit webapp)
      - config:/home/config # ui configuration
      - homeassistant:/home/homeassistant # to set permissions (in start.sh)
      - letsencrypt:/home/letsencrypt # certificates
      - cloudflare:/home/cloudflare # certbot credentials
    networks:
      - tunnel
      - config
      - database

  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/PDT
      - SUDO_PASSWORD="${SUDO_PASSWORD}"
      - DEFAULT_WORKSPACE=/home/config
    volumes:
      - code-server:/config
      - config:/home/config
      - homeassistant:/home/homeassistant
      - jupyter:/home/jovyan
      - letsencrypt:/home/letsencrypt
      - letsencrypt-log:/home/letsencrypt/log
    expose:
      - 8443
    restart: unless-stopped
    networks:
      - tunnel
      - config

  jupyter:
    image: jupyter/scipy-notebook
    container_name: jupyter
    command: "start-notebook.sh --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    user: root
    environment:
      - GRANT_SUDO=yes
      - NB_UID=1000
      - NB_GID=1000
    volumes:
      - jupyter:/home/jovyan
      - config:/home/config
      - letsencrypt:/home/letsencrypt
      - letsencrypt-log:/home/letsencrypt/log
    expose:
      - 8888
    restart: unless-stopped
    networks:
      - tunnel
      - config

  database:
    container_name: database
    # timescale sort of works, too, but sometimes fails with
    #     source database "template1" is being accessed by other users
    # image: timescale/timescaledb-ha:pg16
    image: bitnami/postgresql:15.6.0
    restart: unless-stopped
    user: root
    volumes:
      - timescaledb:/home/postgres/pgdata/data
      - postgres:/bitnami/postgresql
    expose:
      - 5432
    ports:
      # local development
      - 5432:5432
    networks:
      - database
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USERNAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  # balena-engine run -v cloudflare:/opt/cloudflare -v letsencrypt:/etc/letsencrypt -v letsencrypt-log:/var/log/letsencrypt certbot/dns-cloudflare --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials certonly -d backend.leaf49.org --agree-tos
  # balena-engine run -v cloudflare:/opt/cloudflare certbot/dns-cloudflare ls /opt/cloudflare

  # letsencrypt certificate factory
  # https://eff-certbot.readthedocs.io/
  # https://www.nodinrogers.com/post/2022-03-10-certbot-cloudflare-docker/
  certbot:
    image: certbot/dns-cloudflare
    restart: no

    # Dry Run
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -m bernhard.e.boser@gmail.com -d backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory --dry-run
    # Renew certificate
    # command: renew --non-interactive --no-self-upgrade --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos --server https://acme-v02.api.letsencrypt.org/directory

    # Issue certificate
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -m bernhard.e.boser@gmail.com --key-type rsa -d dev.backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory

    # --key-type rsa
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -d test.example.com --server https://acme-v02.api.letsencrypt.org/directory --dry-run

    #### no point until the tunnel is working ...
    #### command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -d backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory --dry-run

    volumes:
      - cloudflare:/opt/cloudflare
      - letsencrypt:/etc/letsencrypt
      - letsencrypt-log:/var/log/letsencrypt

  # https://www.home-assistant.io/installation/alternative/#docker-compose
  # https://github.com/home-assistant/docker/blob/master/Dockerfile
  homeassistant:
    image: 'ghcr.io/home-assistant/home-assistant:stable'
    container_name: homeassistant
    volumes:
      - homeassistant:/config
      - /run/dbus:/run/dbus:ro
      # - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    expose:
      - 8123
    labels:
      io.balena.features.dbus: 1
    environment:
      - DBUS_SYSTEM_BUS_ADDRESS=unix:path=/host/run/dbus/system_bus_socket
    networks:
      - tunnel

  # https://github.com/rbonghi/docker-dropbox-app
  backup-config:
    image: rbonghi/dropbox:latest
    command: ['--folder', 'config', '--fromLocal', '--verbose', '--interval', '120']
    environment:
      - PYTHONUNBUFFERED=1
      - DROPBOX_APP_KEY=${DROPBOX_APP_KEY}
      - DROPBOX_APP_SECRET=${DROPBOX_APP_SECRET}
      - DROPBOX_REFRESH_TOKEN=${DROPBOX_REFRESH_TOKEN}
    volumes:
      - config:/dropbox

  backup-homeassistant:
    image: rbonghi/dropbox:latest
    command: ['--rootdir', '/dropbox/backups', '--folder', 'homeassistant', '--fromLocal', '--verbose', '--interval', '120']
    environment:
      - PYTHONUNBUFFERED=1
      - DROPBOX_APP_KEY=${DROPBOX_APP_KEY}
      - DROPBOX_APP_SECRET=${DROPBOX_APP_SECRET}
      - DROPBOX_REFRESH_TOKEN=${DROPBOX_REFRESH_TOKEN}
    volumes:
      - homeassistant:/dropbox

  backup-jupyter:
    image: rbonghi/dropbox:latest
    command: ['--rootdir', '/dropbox/work', '--folder', 'jupyter', '--fromLocal', '--verbose', '--interval', '600']
    environment:
      - PYTHONUNBUFFERED=1
      - DROPBOX_APP_KEY=${DROPBOX_APP_KEY}
      - DROPBOX_APP_SECRET=${DROPBOX_APP_SECRET}
      - DROPBOX_REFRESH_TOKEN=${DROPBOX_REFRESH_TOKEN}
    volumes:
      - jupyter:/dropbox
