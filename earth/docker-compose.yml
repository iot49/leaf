# docker-compose.yml for Balena

# IMPORTANT: set environment variables in the Balena dashboard

version: '2'

networks:
  tunnel:
  config:
  certbot:
  database:

volumes:
  config: # app configuration files
  ui: # ui static files, served api
  jupyter: # jupyter notebooks
  letsencrypt: # letsencrypt certificates
  letsencrypt-log: # letsencrypt logs
  code-server: # code-server configuration
  cloudflare: # cloudflare credentials
  postgres: # postgres database
  wireshark: # wireshark configuration

services:
  tunnel:
    container_name: tunnel
    image: cloudflare/cloudflared:latest
    restart: always
    command: tunnel run
    networks:
      - tunnel

  api:
    container_name: api
    image: ttmetro/leaf-backend
    restart: always
    command: "sh -c 'uvicorn app.main:app --workers 3 --host 0.0.0.0 --port 8000'"
    # command: "sh -c 'alembic upgrade head && uvicorn app.main:app --workers 3 --host 0.0.0.0 --port 8000'"
    # command: "sh -c 'alembic upgrade head && gunicorn -w 3 -k uvicorn.workers.UvicornWorker app.main:app  --bind 0.0.0.0:8000 --preload --log-level=debug --timeout 120'"
    expose:
      - 8000
    volumes:
      - ui:/home/ui
      - config:/home/config
      - letsencrypt:/home/letsencrypt
    networks:
      - tunnel
      - config
      - certbot
      - database

  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/PDT
      - SUDO_PASSWORD=secret
      - DEFAULT_WORKSPACE=/home/config
    volumes:
      - code-server:/config
      - config:/home/config
      - jupyter:/home/jovyan
      - letsencrypt:/home/letsencrypt
      - letsencrypt-log:/home/letsencrypt/log
    expose:
      - 8443
    restart: unless-stopped
    networks:
      - tunnel
      - config

  jupyter:
    image: jupyter/scipy-notebook
    container_name: jupyter
    command: "start-notebook.sh --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    environment:
      # does not work
      - GRANT_SUDO=yes
    volumes:
      - jupyter:/home/jovyan
      - config:/home/config
      - letsencrypt:/home/letsencrypt
      - letsencrypt-log:/home/letsencrypt/log
    expose:
      - 8888
    restart: unless-stopped
    networks:
      - tunnel
      - config
      - certbot

  # TODO: create database!
  database:
    container_name: database
    image: bitnami/postgresql:15.6.0
    restart: always
    user: root
    volumes:
      - postgres:/bitnami/postgresql
    expose:
      - 5432
    networks:
      - database
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # letsencrypt certificate factory
  # https://eff-certbot.readthedocs.io/
  # https://www.nodinrogers.com/post/2022-03-10-certbot-cloudflare-docker/
  certbot:
    image: certbot/dns-cloudflare

    # Dry Run
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -m bernhard.e.boser@gmail.com -d backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory --dry-run
    # Renew certificate
    # command: renew --non-interactive --no-self-upgrade --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos --server https://acme-v02.api.letsencrypt.org/directory

    # Issue certificate
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -m bernhard.e.boser@gmail.com --key-type rsa -d dev.backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory

    # --key-type rsa
    # command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -d test.example.com --server https://acme-v02.api.letsencrypt.org/directory --dry-run

    #### no point until the tunnel is working ...
    #### command: certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials /opt/cloudflare/credentials --agree-tos -d backend.leaf49.org --server https://acme-v02.api.letsencrypt.org/directory --dry-run

    volumes:
      - cloudflare:/opt/cloudflare
      - letsencrypt:/etc/letsencrypt
      - letsencrypt-log:/var/log/letsencrypt
    networks:
      - certbot
